#!/usr/bin/python -W ignore
# -*- coding: utf-8 -*-
"""
A munin plugin for reading numbers from a serial line and spitting them
out to munin, more or less.  Optimized for temperatures.

Ryan Tucker <rtucker@gmail.com>
"""
import os
import serial
import sys
import time

# Configure each temperature-sensing device here.
CONFIG = {
    'deepfreeze': {
        'label': 'deepfreeze',
        'desc': 'deep freeze in basement',
        'port': '/dev/ttyACM0',
        'units': 'degrees C',
        'warning': '-23:-18',
        'critical': ':-15',
        'sampletime': 3,
        'sane_max': 20,
        'sane_min': -60,
    }
}

def generate_config(name):
    """Generates a configuration for the Munin chart."""
    return '\n'.join([
        "graph_title Temperature of %(desc)s",
        "graph_vlabel %(units)s",
        "graph_category Sensors",
        "graph_args --alt-autoscale",
        "graph_info This graph charts the sensed temperature of a device " +
            "called '%(label)s', which is described as '%(desc)s'. " +
            "(Port: %(port)s)",
        "%(label)s.label %(units)s",
        "%(label)s.warning %(warning)s",
        "%(label)s.critical %(critical)s",
    ]) % CONFIG[name]

def get_reading(port, sampletime=5, sane_max=None, sane_min=None):
    """Gets a reading from the device on <port>.

       Averages the reading over <sampletime> seconds.
    """
    loopstart = time.time()
    ser = serial.Serial(port, 9600)
    ser.flush()

    results = []
    _ok = False

    while not _ok or (time.time() < loopstart+sampletime):
        row = ser.readline()
        try:
            datapoint = float(row)
            if (sane_min is None or datapoint > sane_min) and (sane_max is None or datapoint < sane_max):
                _ok = True
                results.append(datapoint)
        except ValueError:
            continue

    ser.close()

    return sum(results)/len(results)

def main():
    """main function to handle munin fun"""
    myname = os.path.split(sys.argv[0])[-1].split('_')[1]
    if len(sys.argv) > 1 and sys.argv[1] == 'config':
        print(generate_config(myname))
    else:
        reading = get_reading(port=CONFIG[myname]['port'],
                              sampletime=CONFIG[myname]['sampletime'],
                              sane_max=CONFIG[myname]['sane_max'],
                              sane_min=CONFIG[myname]['sane_min'])
        print('%s.value %g' % (CONFIG[myname]['label'], reading))

if __name__ == '__main__':
    main()

